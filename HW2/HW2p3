import numpy as np
import matplotlib.pyplot as plt

def rf_bisect(f,xlo,xhi,xtol,nmax):
  
    xlow = xlo     #setting new variables for parameters
    xhigh = xhi
    iters = 1
    midpoint = (xlo+xhi)/2.0    #first midpoint and potential root
    root = midpoint
    xmids = []
    fmids=[]
    
    xmids.append(midpoint)
    fmids.append(f(midpoint))

    
    
    for i in range(0,nmax):    #up to max iterations
        
         #if you are within tolerance break because you're done
        if np.abs(xlow-xhigh)<xtol:
            break
       
        # handle if your break lands on direct root
        if f(midpoint) == 0.0:
            break
       
        #if sign change occurs on left side, move midpoint left
        if f(xlow)/f(midpoint) < 0:
            xhigh = midpoint 
        #if sign change occurs on right side, move  midpoint right
        elif f(xhigh)/f(midpoint) < 0:
            xlow = midpoint
            
            
            
        #make new midpoint, add counter for iterations, and assign root as midpoint
        midpoint = (xlow+xhigh)/2.0
        iters += 1 
        root = midpoint
        xmids.append(midpoint)
        fmids.append(f(midpoint))
    
    

    return (xmids, fmids)
  
  
  
# Functions f1, f2, f3, and f4 that may be used to test your implementation of rf_bisect.
def f1(x):
    return 3 * x + np.sin(x) - np.exp(x)

def f2(x):
    return x**3

def f3(x):
    return np.sin(1. / (x + 0.01))

def f4(x):
    return 1. / (x - 0.5)
    
    
f = [f1,f2,f3,f4]
t = [10**-3, 10**-6, 10**-12]
      
def plot(xmid,fmid):
    for i in range(0,4):
        
        
        
        
        

    
       
x = np.arange(-1,1,.001)
plt.plot(x, f1(x), label = 'f1')
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.xlim(-1,1)
plt.grid(True)
plt.show()
